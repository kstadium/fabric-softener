#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#


name: Fabric
version: "1.0"
mutual-tls: false

caliper:
  blockchain: fabric
  # command:
        # start: export FABRIC_VERSION=2.1.0;export FABRIC_CA_VERSION=1.4.4;docker-compose -f networks/fabric/docker-compose/2org1peercouchdb_solo_raft/docker-compose-tls.yaml up -d;sleep 20s
        # end: docker-compose
info:
  Version: 1.4.7
  Size: {{ bld_msp_config_name }}
  Orderer: Raft
  Distribution: 
  StateDB: GoLevelDB

clients:
{% for org in bld_peer_orgs %}
  client0.{{ org.domain }}:
    client:
      organization: {{ org.name }}
      credentialStore:
        path: /tmp/hfc-kvs/{{ org.name | lower }}
        cryptoStore:
          path: /tmp/hfc-cvs/{{ org.name | lower }}
      clientPrivateKey:
        path: networks/crypto-config/peerOrganizations/{{ org.domain }}/users/User1@{{ org.domain }}/msp/keystore/key.pem
      clientSignedCert:
        path: networks/crypto-config/peerOrganizations/{{ org.domain }}/users/User1@{{ org.domain }}/msp/signcerts/User1@{{ org.domain }}-cert.pem
{% endfor %}

channels:
  mychannel:
    configBinary: networks/mychannel.tx
    created: false
    orderers:
{% for org in bld_orderer_orgs %}
{% for orderer in org.orderers %}
    - {{ orderer.host_name }}.{{ org.domain }}
{% endfor %}
{% endfor %}
    peers:
{% for org in bld_peer_orgs %}
{% for peer in org.peers %}
      {{ peer.host_name }}.{{ org.domain }}:
        eventSource: true
{% endfor %}
{% endfor %}
{% if caliper_config_chaincodes != None and caliper_config_chaincodes is iterable and caliper_config_chaincodes | length > 0 %}
    chaincodes:
{% for cc in caliper_config_chaincodes %}
    - id: {{ cc.name }}
      version: v1.0.0
      language: {{ cc.lang }}
{% endfor %}
{% endif %}

organizations:
{% for org in bld_peer_orgs %}
  {{ org.name }}:
    mspid: {{ org.msp_id }}
    peers:
{% for peer in org.peers %}
    - {{ peer.host_name }}.{{ org.domain }}
{% endfor %}
    certificateAuthorities:
    - ca.{{ org.domain }}
    adminPrivateKey:
      path: networks/crypto-config/peerOrganizations/{{ org.domain }}/users/Admin@{{ org.domain }}/msp/keystore/key.pem
    signedCert:
      path: networks/crypto-config/peerOrganizations/{{ org.domain }}/users/Admin@{{ org.domain }}/msp/signcerts/Admin@{{ org.domain }}-cert.pem
{% endfor %}
orderers:
{% for org in bld_orderer_orgs %}
{% for orderer in org.orderers %}
  {{ orderer.host_name }}.{{ org.domain }}:
    url: grpcs://{{ orderer.host_name }}.{{ org.domain }}:{{ orderer.port }}
    grpcOptions:
      ssl-target-name-override: {{ orderer.host_name }}.{{ org.domain }}
      grpc-max-send-message-length: -1
    tlsCACerts:
        path: networks/crypto-config/ordererOrganizations/{{ org.domain }}/users/Admin@{{ org.domain }}/tls/ca.crt
{% endfor %}
{% endfor %}

peers:
{% for org in bld_peer_orgs %}
{% for peer in org.peers %}
  {{ peer.host_name }}.{{ org.domain }}:
    url: grpcs://{{ peer.host_name }}.{{ org.domain }}:{{ peer.port }}
    grpcOptions:
      ssl-target-name-override: {{ peer.host_name }}.{{ org.domain }}
      grpc-max-send-message-length: -1
      grpc-wait-for-ready-timeout: 10000
      grpc.keepalive_time_ms: 600000
    tlsCACerts:
        path: networks/crypto-config/peerOrganizations/{{ org.domain }}/users/Admin@{{ org.domain }}/msp/tlscacerts/tlsca.{{ org.domain }}-cert.pem
{% endfor %}
{% endfor %}
certificateAuthorities:
{% for org in bld_peer_orgs %}
  ca.{{org.domain}}:
    url: https://ca.{{org.domain}}:{{ org.ca.port }}
    httpOptions:
      verify: false
    tlsCACerts:
        path: networks/crypto-config/peerOrganizations/{{org.domain}}/tlsca/tlsca.{{org.domain}}-cert.pem
    registrar:
    - enrollId: admin
      enrollSecret: adminpw
{% endfor %}
{% for org in bld_orderer_orgs %}
  ca.{{org.domain}}:
    url: https://ca.{{org.domain}}:{{ org.ca.port }}
    httpOptions:
      verify: false
    tlsCACerts:
        path: networks/crypto-config/ordererOrganizations/{{org.domain}}/tlsca/tlsca.{{org.domain}}-cert.pem
    registrar:
    - enrollId: admin
      enrollSecret: adminpw
{% endfor %}