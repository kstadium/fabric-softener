/*
 * SPDX-License-Identifier: Apache-2.0
 */

'use strict';

module.exports.info  = 'Creating private Asset in Registry';

const chaincodeID = 'fixed-asset';
const bytes = (s) => {
    return ~-encodeURI(s).split(/%..|./).length;
};
let txIndex = 0;
let clientIdx;
let asset;
let bc, contx, bytesize;
{%- set clients = [] -%}
{%- for org in bld_peer_orgs  -%}
{{ clients.append( '\"' + 'client0.' + org.domain + '\"' ) }}
{%- endfor -%}

const clients = [{{ clients|join(',') }}]
module.exports.init = async function(blockchain, context, args) {
    bc = blockchain;
    contx = context;
    clientIdx = context.clientIdx;
    bytesize = args.bytesize;

    asset = {docType: chaincodeID, content: ''};
    asset.creator = 'client' + clientIdx;
    contx = context;
};

module.exports.run = function() {
    const uuid =  "client" + clientIdx + '_' + txIndex.toString(16);
    asset.uuid = uuid;
    asset.content = "private_" + txIndex.toString(16);
    txIndex++;

    const myArgs = {
        chaincodeFunction: 'createPrivateAsset',
        chaincodeArguments: [uuid],
        transientMap: {content: JSON.stringify(asset)},
        invokerIdentity: clients[txIndex%clients.length]
    }

    return bc.bcObj.invokeSmartContract(contx, chaincodeID, undefined, myArgs);
}

module.exports.end = function() {
    return Promise.resolve();
};
